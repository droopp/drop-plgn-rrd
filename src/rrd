#!/usr/bin/python

#
# RRD worker
#

import sys
import time
import json

import rrdtool
import os


# API


def read():
    line = sys.stdin.readline()
    return line.strip()


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()


# Process - actor
#  read - recieve message from world
#  send - send message to world
#  log - logging anything


_INTERVAL = 5

_RRA = ["RRA:AVERAGE:0.3:2:500"]

_COLORS = ["#FF1100", "#87dd7d", "#5978ea"]


def main(p):

    if not os.path.exists(p):
        os.makedirs(p)

    data_list = []
    tb = time.time()

    while 1:
        line = read()
        if not line:
            break

        send("ok")

        # log("start working..")
        # log("get message: " + line)

        data = json.loads(line)

        try:
            data_list.append(update(p, data.get("_trace")))
        except Exception as e:
            log(e)

        if time.time() - tb > _INTERVAL:
            log("draw data...")

            # for i in data_list:
            #     try:
            #         rrdtool.graph(*i)
            #     except Exception as e:
            #         log(e)

            tb = time.time()
            data_list = []


def update(path, data):

    if data is None:
        return

    name = "drop--" + data.get("tag").replace(":", "-")
    f_file = path + "/" + name

    p = []
    df = []
    line = []
    values = data.get("values")
    labels = data.get("labels")

    i = 0
    for x in labels:
        p.append("DS:{}:GAUGE:{}:U:U".format(x, _INTERVAL*2))
        df.append("DEF:{1}={0}.rrd:{1}:AVERAGE".format(f_file, x))
        line.append("LINE2:{0}{2}:{1}".format(x, x, _COLORS[i]))
        i += 1

    if not os.path.isfile(f_file + ".rrd"):
        rrdtool.create("{}.rrd".format(f_file), "--step", str(_INTERVAL), p, _RRA)

    rrdtool.update("{}.rrd".format(f_file), "-t",
                   [":".join([str(x) for x in labels])],
                   ["N:" + ":".join([str(x) for x in values])])

    return ("{}.png".format(f_file), "-t {}".format(name),
            "--start", "-300s", "-w 570", "-h 120",  df, line)


if __name__ == "__main__":
    main(sys.argv[1])
